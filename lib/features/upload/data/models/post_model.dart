// lib/features/upload/data/models/post_model.dart

import 'package:dadadu_app/features/comments/domain/entities/comment_entity.dart';
import 'package:dadadu_app/features/upload/domain/entities/post_entity.dart';

import '../../../comments/data/models/comment_model.dart';

class PostModel extends PostEntity {
  const PostModel({
    required super.id,
    required super.userId,
    required super.videoUrl,
    required super.thumbnailUrl,
    required super.caption,
    required super.tag,
    required super.diamondGivers,
    super.comments,
    required super.createdAt,
    super.isDisabled = false,
    super.visibilityLevel = 0,
    super.views = 0,
    super.location,
    super.soundTitle,
  });

  factory PostModel.fromMap(Map<String, dynamic> map) {
    List<CommentModel> parsedComments = [];
    if (map['comments'] != null && map['comments'] is List) {
      parsedComments = (map['comments'] as List)
          .map((commentMap) =>
              CommentModel.fromMap(commentMap as Map<String, dynamic>))
          .toList();
    }

    return PostModel(
      id: map['id'] as String,
      userId: map['user_id'] as String,
      videoUrl: map['video_url'] as String,
      thumbnailUrl: map['thumbnail_url'] as String,
      caption: map['caption'] as String,
      tag: map['tag'] as String?,
      diamondGivers: map['diamond_givers'] != null
          ? List<String>.from(map['diamond_givers'].map((id) => id.toString()))
          : [],
      comments: map['comments'] != null
          ? (map['comments'] as List<dynamic>)
              .map((e) => CommentModel.fromJson(e))
              .toList()
          : [],
      createdAt: map['created_at'] as String,
      isDisabled: map['is_disabled'] as bool,
      visibilityLevel: map['visibility_level'] as int,
      views: map['views'] as int,
      location: map['location'] as String,
      soundTitle: map['sound_title'] as String,
    );
  }

// To Map for saving to Supabase (using snake_case for Supabase column names)
  Map<String, dynamic> toMap() {
    return {
      // 'id' is often auto-generated by the database and not included in inserts.
      'user_id': userId,
      'video_url': videoUrl,
      'thumbnail_url': thumbnailUrl,
      'caption': caption,
      'tag': tag,
      'diamond_givers': diamondGivers,
      'comments': comments
          ?.map((comment) => (comment as CommentModel).toMap())
          .toList(),
      'created_at': createdAt,
      'disabled': isDisabled,
      'visibility_level': visibilityLevel,
      'views': views,
      'location': location,
      'sound_title': soundTitle,
    };
  }

// Optional: A copyWith method for immutability and easier updates
  PostModel copyWith({
    String? id,
    String? userId,
    String? videoUrl,
    String? thumbnailUrl,
    String? caption,
    String? tag,
    List<String>? diamondGivers,
    List<CommentEntity>? comments,
    String? createdAt,
    bool? isDisabled,
    int? visibilityLevel,
    int? views,
    String? location,
    String? soundTitle,
  }) {
    return PostModel(
      id: id ?? this.id,
      userId: userId ?? this.userId,
      videoUrl: videoUrl ?? this.videoUrl,
      thumbnailUrl: thumbnailUrl ?? this.thumbnailUrl,
      caption: caption ?? this.caption,
      tag: tag ?? this.tag,
      diamondGivers: diamondGivers ?? this.diamondGivers,
      comments: comments ?? this.comments,
      createdAt: createdAt ?? this.createdAt,
      isDisabled: isDisabled ?? this.isDisabled,
      visibilityLevel: visibilityLevel ?? this.visibilityLevel,
      views: views ?? this.views,
      location: location ?? this.location,
      soundTitle: soundTitle ?? this.soundTitle,
    );
  }
}